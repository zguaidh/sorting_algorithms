#include "sort.h"

/**
 *swap - swaps two nodes
 * @a: the first node
 * @b: the second node
 */
void swap(listint_t *a, listint_t *b)
{
	if (a->prev)
		a->prev->next = b;
	if (b->next)
		b->next->prev = a;
	a->next = b->next;
	b->prev = a->prev;
	a->prev = b;
	b->next = a;
}

/**
 * insertion_sort_list - sorts a doubly linked list of integers
 * in ascending order using the insertion sort algorithm
 * @list: the head of the linked list
 *
 * Return: no return
 */
void insertion_sort_list(listint_t **list)
{
	listint_t *current;
	listint_t *key;

	if (*list == NULL || list == NULL || (*list)->next == NULL)
		return;

	current = (*list)->next;
	while (current)
	{
		if (current->n < current->prev->n)
		{
			swap(current->prev, current);
			if (!current->prev)
				*list = current;
			print_list(*list);

			key = current->prev;
			while (key->prev)
			{
				if (key->n < key->prev->n)
				{
					swap(key->prev, key);
					if (!key->prev)
						*list = key;
					print_list(*list);
				}
				key = key->prev;
			}
		}
		current = current->next;
	}
}
